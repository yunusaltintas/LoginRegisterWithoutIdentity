@model LoginRegister.ViewModels.ViewRegisterModel
@{
    ViewData["Title"] = "Register Form";
}

<br />
<form class="needs-validation" action="Register" controller="Home" method="post" novalidate>
    <div class="form-row">
        <div class="col-md-4 mb-3">
            <label for="FirstName">First name</label>
            <input asp-for="FirstName" type="text" class="form-control" id="FirstName" placeholder="First name" required>
            <div class="valid-feedback">
                Looks good!
            </div>
        </div>
        <div class="col-md-4 mb-3">
            <label for="LastName">Last name</label>
            <input asp-for="LastName" type="text" class="form-control" id="LastName" placeholder="Last name" required>
            <div class="valid-feedback">
                Looks good!
            </div>
        </div>
        <div class="col-md-4 mb-3">
            <label for="UserName">Username</label>
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroupPrepend"></span>
                </div>
                <input asp-for="UserName" type="text" class="form-control" id="UserName" placeholder="Username" aria-describedby="inputGroupPrepend" required>
                <div class="invalid-feedback">
                    Please choose a username.
                </div>
            </div>
        </div>
    </div>
    <div class="form-row">

        <div class="col-md-6 mb-3">
            <label for="Email">E-mail</label>
            <input asp-for="Email" type="email" class="form-control" id="Email" placeholder="E-mail" required>
            <div class="invalid-feedback">
                Email
            </div>
        </div>

        <div class="col-md-3 mb-3">
            <label for="Password1">Password</label>
            <input asp-for="Password1" type="password" class="form-control" id="Password1" placeholder="Password" required>
            <div class="invalid-feedback">
                Password not equals
            </div>
        </div>


        <div class="col-md-3 mb-3">
            <label for="Password2">Password</label>
            <input asp-for="Password2" type="password" class="form-control" id="Password2" placeholder="Password" required>
            <div class="invalid-feedback">
                Password not equals
            </div>
        </div>

    </div>
    

    <div class="form-row">
        <div class="col-md-6 mb-3">
            <label for="City">City</label>
            <input asp-for="City" type="text" class="form-control" id="City" placeholder="City" required>
            <div class="invalid-feedback">
                Please provide a valid city.
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <label for="State">State</label>
            <input asp-for="State" type="text" class="form-control" id="State" placeholder="State" required>
            <div class="invalid-feedback">
                Please provide a valid state.
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <label for="Zip">Zip</label>
            <input asp-for="Zip" type="text" class="form-control" id="validationCustom05" placeholder="Zip" required>
            <div class="invalid-feedback">
                Please provide a valid zip.
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="form-check">
            <input asp-for="IsAgreeTerms" type="checkbox" class="form-check-input" id="invalidCheck" OnCheckedChanged="Check_Clicked" required>
            <label class="form-check-label" for="IsAgreeTerms">
                Agree to terms and conditions
            </label>
            <div class="invalid-feedback">
                You must agree before submitting.
            </div>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Register</button>
</form>

<script>
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();

    $("#password1").on("focusout", function () {
        if ($(this).val() != $("#password2").val()) {
            $("#password2").removeClass("valid").addClass("invalid");
        } else {
            $("#password2").removeClass("invalid").addClass("valid");
        }
    });

    $("#password2").on("keyup", function () {
        if ($("#password1").val() != $(this).val()) {
            $(this).removeClass("valid").addClass("invalid");
        } else {
            $(this).removeClass("invalid").addClass("valid");
        }
    });

</script>